// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TradingAPI.Data;

namespace TradingAPI.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20210929000145_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.10");

            modelBuilder.Entity("TradingAPI.Data.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Credits")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("CourseId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("TradingAPI.Data.Enrollment", b =>
                {
                    b.Property<int>("EnrollmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int?>("Grade")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("EnrollmentId");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId", "CourseId")
                        .IsUnique();

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("TradingAPI.Data.Instrument", b =>
                {
                    b.Property<string>("Symbol")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(767)");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("SymbolChar")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Symbol");

                    b.ToTable("Instrument");
                });

            modelBuilder.Entity("TradingAPI.Data.InstrumentPair", b =>
                {
                    b.Property<string>("Symbol")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(767)");

                    b.Property<int>("BaseCommissionPrecision")
                        .HasColumnType("int");

                    b.Property<string>("BaseInstrumentId")
                        .HasColumnType("varchar(767)");

                    b.Property<bool>("IceBergAllowed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsMarginTradingAllowed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSpotTradingAllowed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("OcoAllowed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("QuoteCommissionPrecision")
                        .HasColumnType("int");

                    b.Property<string>("QuoteInstrumentId")
                        .HasColumnType("varchar(767)");

                    b.Property<bool>("QuoteOrderQuantityMarketAllowed")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Symbol");

                    b.HasIndex("BaseInstrumentId");

                    b.HasIndex("QuoteInstrumentId");

                    b.ToTable("InstrumentPair");
                });

            modelBuilder.Entity("TradingAPI.Data.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsPlayer")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("TradingAPI.Data.PriceHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Close")
                        .HasColumnType("decimal(10,10)");

                    b.Property<decimal>("High")
                        .HasColumnType("decimal(10,10)");

                    b.Property<string>("InstrumentPairId")
                        .HasColumnType("varchar(767)");

                    b.Property<int>("Interval")
                        .HasColumnType("int");

                    b.Property<decimal>("Low")
                        .HasColumnType("decimal(10,10)");

                    b.Property<decimal>("Open")
                        .HasColumnType("decimal(10,10)");

                    b.Property<int>("TradeCount")
                        .HasColumnType("int");

                    b.Property<long>("UtcCloseTime")
                        .HasColumnType("bigint");

                    b.Property<long>("UtcOpenTime")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("InstrumentPairId");

                    b.ToTable("PriceHistory");
                });

            modelBuilder.Entity("TradingAPI.Data.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstMidName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("TradingAPI.Data.Enrollment", b =>
                {
                    b.HasOne("TradingAPI.Data.Course", "Course")
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TradingAPI.Data.Student", "Student")
                        .WithMany("Enrollments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("TradingAPI.Data.InstrumentPair", b =>
                {
                    b.HasOne("TradingAPI.Data.Instrument", "BaseInstrument")
                        .WithMany("BaseInstrumentPairs")
                        .HasForeignKey("BaseInstrumentId");

                    b.HasOne("TradingAPI.Data.Instrument", "QuoteInstrument")
                        .WithMany("QuoteInstrumentPairs")
                        .HasForeignKey("QuoteInstrumentId");

                    b.Navigation("BaseInstrument");

                    b.Navigation("QuoteInstrument");
                });

            modelBuilder.Entity("TradingAPI.Data.PriceHistory", b =>
                {
                    b.HasOne("TradingAPI.Data.InstrumentPair", "InstrumentPair")
                        .WithMany("PriceHistory")
                        .HasForeignKey("InstrumentPairId");

                    b.Navigation("InstrumentPair");
                });

            modelBuilder.Entity("TradingAPI.Data.Course", b =>
                {
                    b.Navigation("Enrollments");
                });

            modelBuilder.Entity("TradingAPI.Data.Instrument", b =>
                {
                    b.Navigation("BaseInstrumentPairs");

                    b.Navigation("QuoteInstrumentPairs");
                });

            modelBuilder.Entity("TradingAPI.Data.InstrumentPair", b =>
                {
                    b.Navigation("PriceHistory");
                });

            modelBuilder.Entity("TradingAPI.Data.Student", b =>
                {
                    b.Navigation("Enrollments");
                });
#pragma warning restore 612, 618
        }
    }
}
