// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TradingAPI.Data;

namespace TradingAPI.Migrations
{
    [DbContext(typeof(MyDbContext))]
    partial class MyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.10");

            modelBuilder.Entity("TradingAPI.Data.Instrument", b =>
                {
                    b.Property<string>("Symbol")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("SymbolChar")
                        .HasColumnType("text");

                    b.Property<string>("SymbolName")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Symbol");

                    b.ToTable("Instrument");
                });

            modelBuilder.Entity("TradingAPI.Data.InstrumentPair", b =>
                {
                    b.Property<string>("Symbol")
                        .HasColumnType("varchar(767)");

                    b.Property<int>("BaseCommissionPrecision")
                        .HasColumnType("int");

                    b.Property<string>("BaseInstrumentSymbol")
                        .HasColumnType("varchar(767)");

                    b.Property<bool>("IceBergAllowed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsMarginTradingAllowed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSpotTradingAllowed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("OcoAllowed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("QuoteCommissionPrecision")
                        .HasColumnType("int");

                    b.Property<string>("QuoteInstrumentSymbol")
                        .HasColumnType("varchar(767)");

                    b.Property<bool>("QuoteOrderQuantityMarketAllowed")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Symbol");

                    b.HasIndex("BaseInstrumentSymbol");

                    b.HasIndex("QuoteInstrumentSymbol");

                    b.ToTable("InstrumentPair");
                });

            modelBuilder.Entity("TradingAPI.Data.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsPlayer")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("TradingAPI.Data.InstrumentPair", b =>
                {
                    b.HasOne("TradingAPI.Data.Instrument", "BaseInstrument")
                        .WithMany()
                        .HasForeignKey("BaseInstrumentSymbol");

                    b.HasOne("TradingAPI.Data.Instrument", "QuoteInstrument")
                        .WithMany()
                        .HasForeignKey("QuoteInstrumentSymbol");

                    b.Navigation("BaseInstrument");

                    b.Navigation("QuoteInstrument");
                });
#pragma warning restore 612, 618
        }
    }
}
