// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TradingAPI.Data;

namespace TradingAPI.Migrations
{
    [DbContext(typeof(TradeListingDbContext))]
    partial class TradeListingDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.10");

            modelBuilder.Entity("TradingAPI.Models.Instrument", b =>
                {
                    b.Property<string>("Symbol")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(767)");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("SymbolChar")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Symbol");

                    b.ToTable("Instrument");
                });

            modelBuilder.Entity("TradingAPI.Models.InstrumentPair", b =>
                {
                    b.Property<string>("Symbol")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(767)");

                    b.Property<int>("BaseCommissionPrecision")
                        .HasColumnType("int");

                    b.Property<string>("BaseInstrumentId")
                        .HasColumnType("varchar(767)");

                    b.Property<bool>("IceBergAllowed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsMarginTradingAllowed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSpotTradingAllowed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("OcoAllowed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("QuoteCommissionPrecision")
                        .HasColumnType("int");

                    b.Property<string>("QuoteInstrumentId")
                        .HasColumnType("varchar(767)");

                    b.Property<bool>("QuoteOrderQuantityMarketAllowed")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Symbol");

                    b.HasIndex("BaseInstrumentId");

                    b.HasIndex("QuoteInstrumentId");

                    b.ToTable("InstrumentPair");
                });

            modelBuilder.Entity("TradingAPI.Models.PriceHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Close")
                        .HasColumnType("decimal(10,10)");

                    b.Property<decimal>("High")
                        .HasColumnType("decimal(10,10)");

                    b.Property<string>("InstrumentPairId")
                        .HasColumnType("varchar(767)");

                    b.Property<int>("Interval")
                        .HasColumnType("int");

                    b.Property<decimal>("Low")
                        .HasColumnType("decimal(10,10)");

                    b.Property<decimal>("Open")
                        .HasColumnType("decimal(10,10)");

                    b.Property<int>("TradeCount")
                        .HasColumnType("int");

                    b.Property<long>("UtcCloseTime")
                        .HasColumnType("bigint");

                    b.Property<long>("UtcOpenTime")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("InstrumentPairId");

                    b.ToTable("PriceHistory");
                });

            modelBuilder.Entity("TradingAPI.Models.InstrumentPair", b =>
                {
                    b.HasOne("TradingAPI.Models.Instrument", "BaseInstrument")
                        .WithMany("BaseInstrumentPairs")
                        .HasForeignKey("BaseInstrumentId");

                    b.HasOne("TradingAPI.Models.Instrument", "QuoteInstrument")
                        .WithMany("QuoteInstrumentPairs")
                        .HasForeignKey("QuoteInstrumentId");

                    b.Navigation("BaseInstrument");

                    b.Navigation("QuoteInstrument");
                });

            modelBuilder.Entity("TradingAPI.Models.PriceHistory", b =>
                {
                    b.HasOne("TradingAPI.Models.InstrumentPair", "InstrumentPair")
                        .WithMany("PriceHistory")
                        .HasForeignKey("InstrumentPairId");

                    b.Navigation("InstrumentPair");
                });

            modelBuilder.Entity("TradingAPI.Models.Instrument", b =>
                {
                    b.Navigation("BaseInstrumentPairs");

                    b.Navigation("QuoteInstrumentPairs");
                });

            modelBuilder.Entity("TradingAPI.Models.InstrumentPair", b =>
                {
                    b.Navigation("PriceHistory");
                });
#pragma warning restore 612, 618
        }
    }
}
